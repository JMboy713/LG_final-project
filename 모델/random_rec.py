{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOCBiTVNjMCRA/T1PXVbgZ5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from surprise import Reader\n","from surprise import Dataset\n","from surprise.prediction_algorithms import KNNBaseline"],"metadata":{"id":"4KTVt8Fp8Pdq"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pqvQQeC1snLi"},"outputs":[],"source":["def random_similer(user_input=[]):\n","  con_score = pd.read_csv('/content/drive/MyDrive/LG Hellovision VOD 추천 프로젝트/모델/content_surprise/csv/score.csv')\n","  rec = pd.read_csv('/content/drive/MyDrive/LG Hellovision VOD 추천 프로젝트/모델/content_surprise/csv/recommend_all_user.csv')\n","\n","  # surprise 데이터 형식으로 변환\n","  def convert_traintest_dataframe_forsurprise(training_dataframe):\n","    reader = Reader(rating_scale=(0, 1)) # 범위가 0~1 인 경우\n","    trainset = Dataset.load_from_df(training_dataframe[['subsr', 'vod_id', 'cp_score']], reader)\n","    trainset = trainset.construct_trainset(trainset.raw_ratings)\n","    return trainset\n","\n","  trainset = convert_traintest_dataframe_forsurprise(con_score)\n","\n","  trainset = convert_traintest_dataframe_forsurprise(con_score)\n","  sim_options = {'name': 'pearson', 'user_based': True}\n","  knnbaseline = KNNBaseline(sim_options=sim_options, bsl_options={'method': 'sgd', 'n_epochs': 1})\n","  knnbaseline.fit(trainset)\n","\n","  top_n_neighbors = {}\n","  try:\n","      inner_uid = trainset.to_inner_uid(user_input)\n","      neighbors = knnbaseline.get_neighbors(inner_uid, k=3)\n","      top_n_neighbors[user_input] = [trainset.to_raw_uid(x) for x in neighbors]\n","  except ValueError:\n","      top_n_neighbors[user_input] = []\n","\n","  similer3 = pd.DataFrame.from_dict(top_n_neighbors, orient='index')\n","\n","  # vod_predict 데이터프레임 생성\n","  vod_predict = rec.copy()\n","  vod_predict.index = vod_predict['subsr']\n","  vod_predict = vod_predict.apply(lambda x: x[1:].tolist(), axis=1)\n","  vod_predict = vod_predict.reset_index()\n","  vod_predict.columns = ['subsr', 'vod_id']\n","\n","  def get_combined_vod_ids(row):\n","    combined_vod_ids = []\n","    for col_idx in range(1, 4):\n","      user_id = row.iloc[col_idx]\n","      vod_ids = vod_predict[vod_predict['subsr'] == user_id]['vod_id'].values\n","      if vod_ids:\n","        combined_vod_ids.extend(vod_ids[0])\n","\n","      # 중복 제거\n","      combined_vod_ids = list(OrderedDict.fromkeys(combined_vod_ids))[:10]\n","      return combined_vod_ids\n","\n","  if user_input in similer3.index:\n","    similer3_row = similer3.loc[user_input]\n","    combined_vod_ids_result = get_combined_vod_ids(similer3_row)\n","  else:\n","    combined_vod_ids_result = []  # Return empty list if user_input not found\n","\n","  return combined_vod_ids_result\n"]}]}